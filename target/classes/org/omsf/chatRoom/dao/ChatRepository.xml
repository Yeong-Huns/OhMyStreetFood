<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.omsf.chatRoom.dao.ChatRepository">

    <!-- isOwner -->
    <select id="isOwner" resultType="boolean">
        SELECT CASE
                   WHEN LOWER(memberType) = 'owner' THEN 1
                   ELSE 0
                   END
        FROM member
        WHERE username = #{username}
    </select>

    <!-- getOwnerAddress -->
    <select id="getOwnerAddress" resultType="String">
        SELECT storeNo AS subscription
        FROM store
        WHERE member_username = #{username}
    </select>

    <!-- getUserSubscriptions-->
    <select id="getUserSubscriptions" resultType="org.omsf.chatRoom.model.ChatRoomVO">
        SELECT chatroomNo, customer, storeNo, ownerVisible, customerVisible, updatedAt
        FROM chatroom
        WHERE customer = #{address}
           OR (storeNo = TO_NUMBER(NULLIF(#{address}, 'invalid')) AND REGEXP_LIKE(#{address}, '^[0-9]+$'))
    </select>

    <!-- getSubscriptionByChatRoomNo -->
    <select id="getSubscriptionByChatRoomNo" resultType="java.lang.String">
        SELECT
            c.customer || c.storeNo AS subscription
        FROM
            ChatRoom c
        WHERE
            c.chatRoomNo = #{chatRoomNo}
    </select>

    <!-- getChatRoomNoBySubscription -->
    <select id="getChatRoomNoBySubscription" parameterType="map" resultType="java.lang.Long">
        SELECT chatRoomNo
        FROM ChatRoom
        WHERE customer = #{customer}
          AND storeNo = #{storeNo}
    </select>

    <!-- -->

    <!-- getChatRoomsWithLastMessage -->
    <select id="getChatRoomsWithLastMessage" parameterType="string" resultType="org.omsf.chatRoom.model.GetChatRoomNoBySubscriptionRequest">
        WITH UserType AS (
            SELECT
                CASE
                    WHEN LOWER(memberType) = 'owner' THEN 'owner'
                    ELSE 'user'
                    END AS type,
                m.username
            FROM member m
            WHERE m.username = #{username}
        ),
             OwnerStores AS (
                 SELECT storeNo
                 FROM store
                 WHERE member_username = (SELECT username FROM UserType WHERE type = 'owner')
             ),
             ChatRooms AS (
                 SELECT
                     cr.chatroomNo,
                     cr.customer,
                     cr.storeNo,
                     cr.ownerVisible,
                     cr.customerVisible,
                     cr.updatedAt,
                     CASE
                         WHEN ut.type = 'owner' THEN (SELECT nickname FROM member WHERE username = cr.customer)
                         ELSE s.storeName
                         END AS target,
                     CASE
                         WHEN ut.type = 'owner' THEN 'img/00.jpg'
                         WHEN s.picture IS NULL THEN 'img/00.jpg'
                         ELSE p.picture
                         END AS img
                 FROM chatroom cr
                          JOIN UserType ut ON cr.customer = ut.username
                     OR (ut.type = 'owner' AND cr.storeNo IN (SELECT storeNo FROM OwnerStores))
                          LEFT JOIN store s ON cr.storeNo = s.storeNo
                          LEFT JOIN photo p ON s.picture = p.photoNo
                 ORDER BY cr.updatedAt DESC
                     FETCH FIRST 5 ROWS ONLY
             )
        SELECT
            cr.chatroomNo,
            cr.ownerVisible,
            cr.customerVisible,
            cr.updatedAt,
            cr.target,
            cr.img,
            m.content AS lastMessage
        FROM ChatRooms cr
                 LEFT JOIN (
            SELECT
                chatRoomNo,
                content,
                ROW_NUMBER() OVER (PARTITION BY chatRoomNo ORDER BY createdAt DESC) AS rn
            FROM Message
        ) m ON cr.chatroomNo = m.chatRoomNo
        WHERE m.rn = 1
    </select>



    <!-- owner Store List -->
    <select id="findStoreListByAddress" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT storeno
        FROM STORE
        WHERE member_username = (
            SELECT member_username
            FROM STORE
            WHERE TO_CHAR(storeno) = #{address}
            FETCH FIRST 1 ROWS ONLY
        )
    </select>


    <!-- create ChatRoom -->
    <insert id="saveChatRoom">
        INSERT INTO CHATROOM (CUSTOMER, STORENO)
        VALUES (#{address}, #{storeNo})
    </insert>

    <!-- update Visible-->



    <select id="isSubscribed" resultType="int">
        SELECT COUNT(*)
        FROM ChatRoom
        WHERE customer = #{customerId}
        AND storeNo = #{storeNo}
    </select>

    <insert id="subscribeToChatRoom">
        INSERT INTO ChatRoom (CUSTOMER,STORENO)
        VALUES (#{customerId}, #{storeNo})
    </insert>


    <select id="findOwnerByRoomAddress" resultType="java.lang.String">
        SELECT s.MEMBER_USERNAME AS ownerId
        FROM STORE s
                 JOIN MEMBER m ON UPPER(s.MEMBER_USERNAME) = UPPER(m.USERNAME)
        WHERE s.STORENO = #{storeNo}
          AND UPPER(m.MEMBERTYPE) = 'OWNER'
    </select>

    <select id="findOwnerByChatRoomNo" resultType="java.lang.String">
        SELECT s.MEMBER_USERNAME AS owner
        FROM ChatRoom cr
                 JOIN Store s ON cr.storeNo = s.STORENO
        WHERE cr.chatRoomNo = #{chatRoomNo}
    </select>

    <select id="findCustomerByChatRoomNo" resultType="java.lang.String">
        SELECT cr.customer AS customerId
        FROM ChatRoom cr
        WHERE cr.chatRoomNo = #{chatRoomNo}
    </select>
</mapper>